\documentclass{article}
\usepackage[margin=1.0in]{geometry} % To set margins
\usepackage{amsmath}  % This allows me to use the align functionality.
                      % If you find yourself trying to replicate
                      % something you found online, ensure you're
                      % loading the necessary packages!
\usepackage{amsfonts} % Math font
\usepackage{fancyvrb}
\usepackage{hyperref} % For including hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\usepackage{float}    % For telling R where to put a table/figure
\usepackage{natbib}        %For the bibliography
\bibliographystyle{apalike}%For the bibliography

\begin{document}
  \begin{enumerate}
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 1
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{pois.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x).$ Enable the user to specify the rate parameter $\lambda$.
<<size="scriptsize">>=
pois.prob <- function(x, lambda, type="<="){
  # Use dpois and ppois to conditionally return the correct probability
  if (type == "="){
    return(dpois(x, lambda))
  } 
  else if (type == "!="){
    return(1 - dpois(x, lambda))
  }
  else if (type == "<"){
    return(ppois(x - 1, lambda))
  }
  else if (type == "<="){
    return(ppois(x, lambda))
  }
  else if (type == ">"){
    return(1 - ppois(x, lambda))
  }
  else if (type == ">="){
    return(1 - ppois(x - 1, lambda))
  }
}
@
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 2
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{beta.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x)$
    for a beta distribution. Enable the user to specify the shape parameters
    $\alpha$ and $\beta$.
<<size="scriptsize">>=
beta.prob <- function(x, alpha, beta, type="<="){
  # Use dbeta and pbeta to conditionally return the correct probability
  
  if (type == "="){
    return(dbeta(x, alpha, beta))
  }
  else if (type == "!=") {
    return (1 - dbeta(x, alpha, beta))
  }
  else if (type %in% c("<", "<=")){
    return(pbeta(x, alpha, beta, lower.tail = TRUE))
  }
  else if (type %in% c(">", ">=")){
    return(pbeta(x, alpha, beta, lower.tail = FALSE))
  }
}
@

The \texttt{pois.prob()} and \texttt{beta.prob()} functions compute probabilities for the Poisson and Beta distributions, respectively. The \texttt{pois.prob()} function calculates the probabilities for the Poisson-distributed random variable with a given rate parameter ($\lambda$), using \texttt{dpois()} for exact probabilities and \texttt{ppois()} for cumulative probabilities. The \texttt{beta.prob()} function does the same for a Beta-distributed variable with shape parameteres ($\alpha$, $\beta$) using \texttt{dbeta()} for density values and \texttt{pbeta()} for cumulative probabilities.

\end{enumerate}
\bibliography{bibliography}
\end{document}
